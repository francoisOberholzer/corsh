package functions;

import java.util.Vector;

//CEC 2006
public class G01 extends AbstractFunction {
	private static int dimension = 13;
	private static double[] domainsMin = new double[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};	
	private static double[] domainsMax = new double[]{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10};
	
    public Double f(Vector<Double> x) {
		double f;  

		f = 5.0 * (x[0] + x[1] + x[2] + x[3]) - 5.0 * (x[0] * x[0] + x[1] * x[1] + x[2] * x[2] + x[3] * x[3]);
    }

    public double violation(Vector<Double> x) {
		double[] z;
		double g1, g2;
	 
		//Constraints  
	    g1 = 1.0;
		g2 = 0.0;

		for (int i = 0; i < x.size(); i++) {
			g1 = g1 * z[i];
			g2 = g2 + z[i];
		}

		g1 = 0.75 - g1;
		g2 = g2 - (7.5 * x.size());

		//Mean Violations
		if (g1 < 0) {
			g1 = 0;
		}
		if (g2 < 0) {
			g2 = 0;
		}

		return (g1 + g2)/2;
    }
    
    public int getDimension() {
    	return dimension;
    }
    
    public double[] getDomainsMin() {
    	return domainsMin;
    }
    
    public double[] getDomainsMax() {
    	return domainsMax;
    }
}
