package functions;

import java.util.Vector;

//CEC 2006
public class G12 extends AbstractFunction {
	private static int dimension = 3;
	private static double[] domainsMin = new double[]{0, 0, 0};	
	private static double[] domainsMax = new double[]{10, 10, 10};
	private final double e = 0.0001;
	
    public Double f(Vector<Double> x) {
    	double f;
    	double gt;
    	 int i, j, k;

    	 f = (100. - (x[0] - 5.) * (x[0] - 5.) - (x[1] - 5.) * (x[1] - 5.) - (x[2] - 5.) * (x[2] - 5.)) / 100.;
    	 f = -f;
    	 return f;
    }

    public double violation(Vector<Double> x) {
    	g[0] = (x[0] - 1.) * (x[0] - 1.) + (x[1] - 1.) * (x[1] - 1.) + (x[2] - 1.) * (x[2] - 1.) - 0.0625;
  	  for (i = 1; i <= 9; i++)
  	    {
  	      for (j = 1; j <= 9; j++)
  		{
  		  for (k = 1; k <= 9; k++)
  		    {
  		      gt = (x[0] - i) * (x[0] - i) + (x[1] - j) * (x[1] - j) + (x[2] - k) * (x[2] - k) - 0.0625;
  		      if (gt < g[0])
  			g[0] = gt;
  		    }
  		}
  	    }
    	
    			if (g1 <= 0) {
    				g1 = 0;
    			}
    			if (g2 <= 0) {
    				g2 = 0;
    			}
    			if ((h1 - e) <= 0) {
    				h1 = 0;
    			}
    			if ((h2 - e) <= 0) {
    				h2 = 0;
    			}

    			return (g1 + g2 + h1 + h2)/4;
    }
    
    public int getDimension() {
    	return dimension;
    }
    
    public double[] getDomainsMin() {
    	return domainsMin;
    }
    
    public double[] getDomainsMax() {
    	return domainsMax;
    }
}
