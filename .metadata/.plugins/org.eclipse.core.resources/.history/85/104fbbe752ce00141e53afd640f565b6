package functions;

import java.util.Vector;

//CEC 2006
public class G19 extends AbstractFunction {
	private static int dimension = 15;
	private static double[] domainsMin = new double[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};	
	private static double[] domainsMax = new double[]{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10};
	private final double e = 0.0001;
	
    public Double f(Vector<Double> x) {
    	double f;
    	int i, j;
    	  double sum1 = 0.0, sum2 = 0.0, sum3 = 0.0;
    	  double A[10][5] = { -16.0, 2.0, 0.0, 1.0, 0.0,
    			      0.0, -2.0, 0.0, 0.4, 2.0,  
    			      -3.5, 0.0, 2.0, 0.0, 0.0,
    			      0.0, -2.0, 0.0, -4.0, -1.0,
    			      0.0, -9.0, -2.0, 1.0, -2.8,
    			      2.0, 0.0, -4.0, 0.0, 0.0,
    			      -1.0, -1.0, -1.0, -1.0, -1.0,
    			      -1.0, -2.0, -3.0, -2.0, -1.0,
    			      1.0, 2.0, 3.0, 4.0, 5.0,
    			      1.0, 1.0, 1.0, 1.0, 1.0
    	  };
    	  double B[10] = { -40.0, -2.0, -0.25, -4.0, -4.0, -1.0, -40.0, -60.0, 5.0, 1.0 };
    	  double C[5][5] = { 30.0, -20.0, -10.0, 32.0, -10.0, 
    			     -20.0, 39.0, -6.0, -31.0, 32.0,
    			     -10.0, -6.0, 10.0, -6.0, -10.0,
    			     32.0, -31.0, -6.0, 39.0, -20.0,
    			     -10.0, 32.0, -10.0, -20.0, 30.0
    	  };
    	  double D[5] = { 4.0, 8.0, 10.0, 6.0, 2.0 };
    	  double E[5] = { -15.0, -27.0, -36.0, -18.0, -12.0 };


    	  for (i = 0; i < 10; i++)
    	    {
    	      sum1 += B[i] * x[i];
    	    }
    	  for (i = 0; i < 5; i++)
    	    {
    	      for (j = 0; j < 5; j++)
    		{
    		  sum2 += C[i][j] * x[10 + i] * x[10 + j];
    		}
    	    }
    	  for (i = 0; i < 5; i++)
    	    {
    	      sum3 += D[i] * pow (x[10 + i], 3.0);
    	    }
    	  f[0] = sum1 - sum2 - 2.0 * sum3;
    	  f[0] = -f[0]; /* Max-->Min, Modified by Jane,Nov 22 2005 */

    	  return f;
    }

    public double violation(Vector<Double> x) {
    	for (j = 0; j < 5; j++)
	    {
	      sum1 = 0.0;
	      for (i = 0; i < 5; i++)
		sum1 += C[i][j] * x[10 + i];
	      sum2 = 0.0;
	      for (i = 0; i < 10; i++)
		sum2 += A[i][j] * x[i];
	      g[j] = -((2.0 * sum1) + (3.0 * D[j] * pow (x[10 + j], 2.0)) + E[j] - sum2);
	    }

    			if (g1 <= 0) {
    				g1 = 0;
    			}
    			if (g2 <= 0) {
    				g2 = 0;
    			}
    			if ((h1 - e) <= 0) {
    				h1 = 0;
    			}
    			if ((h2 - e) <= 0) {
    				h2 = 0;
    			}

    			return (g1 + g2 + h1 + h2)/4;
    }
    
    public int getDimension() {
    	return dimension;
    }
    
    public double[] getDomainsMin() {
    	return domainsMin;
    }
    
    public double[] getDomainsMax() {
    	return domainsMax;
    }
}
