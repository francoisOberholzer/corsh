package functions;

import java.util.Vector;

//CEC 2006
public class G21 extends AbstractFunction {
	private static int dimension = 7;
	private static double[] domainsMin = new double[]{0, 0, 0, 0, 0, 0, 0};	
	private static double[] domainsMax = new double[]{10, 10, 10, 10, 10, 10, 10};
	private final double e = 0.0001;
	
    public Double f(Vector<Double> x) {
    	double f;

    	f = x.get(0);
    	  
    	return f;
    }

    public double violation(Vector<Double> x) {
    	double g1, h1, h2, h3, h4, h5;
    	
    	g[0] = -x[0] + 35.0 * pow (x[1], 0.6) + 35.0 * pow (x[2], 0.6);
    	h[0] = -300.0 * x[2] + 7500 * x[4] - 7500 * x[5] - 25.0 * x[3] * x[4] + 25.0 * x[3] * x[5] + x[2] * x[3];
    	h[1] = 100.0 * x[1] + 155.365 * x[3] + 2500 * x[6] - x[1] * x[3] - 25.0 * x[3] * x[6] - 15536.5;
    	h[2] = -x[4] + log (-x[3] + 900.0);
    	h[3] = -x[5] + log (x[3] + 300.0);
    	h[4] = -x[6] + log (-2.0 * x[3] + 700.0);
    	
    	//Mean Violations
    			if (g1 <= 0) {
    				g1 = 0;
    			}
    			if (g2 <= 0) {
    				g2 = 0;
    			}
    			if ((h1 - e) <= 0) {
    				h1 = 0;
    			}
    			if ((h2 - e) <= 0) {
    				h2 = 0;
    			}

    			return (g1 + g2 + h1 + h2)/4;
    }
    
    public int getDimension() {
    	return dimension;
    }
    
    public double[] getDomainsMin() {
    	return domainsMin;
    }
    
    public double[] getDomainsMax() {
    	return domainsMax;
    }
}
