package functions;

import java.util.Vector;

//CEC 2006
public class G18 extends AbstractFunction {
	private static int dimension = 9;
	private static double[] domainsMin = new double[]{0, 0, 0, 0, 0, 0, 0, 0, 0};	
	private static double[] domainsMax = new double[]{10, 10, 10, 10, 10, 10, 10, 10, 10};
	private final double e = 0.0001;
	
    public Double f(Vector<Double> x) {
    	double f;
		
    	f = 0.5 * (x.get(0) * x.get(3) - x.get(1) * x.get(2) + x.get(2) * x.get(8) - x.get(4) * x.get(8) + x.get(4) * x.get(7) - x.get(5) * x.get(6));
		f = -f;
		  
		return f;
    }

    public double violation(Vector<Double> x) {
    	g[0] = -1.0 + Math.pow(x.get(2), 2.0) + Math.pow(x.get(3), 2.0);
   	    g[1] = -1.0 + Math.pow(x.get(8), 2.0);
   	    g[2] = -1.0 + Math.pow(x.get(4), 2.0) + Math.pow(x.get(5), 2.0);
   	    g[3] = -1.0 + Math.pow(x.get(0), 2.0) + Math.pow(x.get(1) - x.get(8), 2.0);
   	    g[4] = -1.0 + Math.pow(x.get(0) - x.get(4), 2.0) + Math.pow(x.get(1) - x.get(5), 2.0);
   	    g[5] = -1.0 + Math.pow(x.get(0) - x.get(6), 2.0) + Math.pow(x.get(1) - x.get(7), 2.0);
   	    g[6] = -1.0 + Math.pow(x.get(2) - x.get(4), 2.0) + Math.pow(x.get(3) - x.get(5), 2.0);
   	    g[7] = -1.0 + Math.pow(x.get(2) - x.get(6), 2.0) + Math.pow(x.get(3) - x.get(7), 2.0);
   	    g[8] = -1.0 + Math.pow(x.get(6), 2.0) + Math.pow (x.get(7) - x.get(8), 2.0);
   	    g[9] = -x.get(0) * x.get(3) + x.get(1) * x.get(2);
   	    g[10] = -x.get(2) * x.get(8);
   	    g[11] = x.get(4) * x.get(8);
   	    g[12] = -x.get(4) * x.get(7) + x.get(5) * x.get(6);
    	
		if (g1 <= 0) {
			g1 = 0;
		}
		if (g2 <= 0) {
			g2 = 0;
		}
		if ((h1 - e) <= 0) {
			h1 = 0;
		}
		if ((h2 - e) <= 0) {
			h2 = 0;
		}

		return (g1 + g2 + h1 + h2)/4;
    }
    
    public int getDimension() {
    	return dimension;
    }
    
    public double[] getDomainsMin() {
    	return domainsMin;
    }
    
    public double[] getDomainsMax() {
    	return domainsMax;
    }
}
