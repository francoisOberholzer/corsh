package functions;

import java.util.Vector;

//CEC 2006
public class G01 extends AbstractFunction {
	private static int dimension = 13;
	private static double[] domainsMin = new double[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};	
	private static double[] domainsMax = new double[]{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10};
	
    public Double f(Vector<Double> x) {
		double f;  

		f = 5.0 * (x.get(0) + x.get(1) + x.get(2) + x.get(3)) - 5.0 * (x.get(0) * x.get(0) + x.get(1) * x.get(1) + x.get(2) * x.get(2) + x.get(3) * x.get(3));
		
		for (int i = 4; i < 13; i++) {
		    f = f - x.get(i);
		}
		
		return f;
    }

    public double violation(Vector<Double> x) {
		return 5;
    }
    
    public int getDimension() {
    	return dimension;
    }
    
    public double[] getDomainsMin() {
    	return domainsMin;
    }
    
    public double[] getDomainsMax() {
    	return domainsMax;
    }
}
