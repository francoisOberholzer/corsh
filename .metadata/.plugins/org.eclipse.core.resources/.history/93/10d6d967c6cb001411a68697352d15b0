package functions;

import java.util.Vector;

public class G15 extends AbstractFunction {
	private static int dimension = 3;
	private static double[] domainsMin = new double[]{0, 0, 0};	
	private static double[] domainsMax = new double[]{10, 10, 10};
	
    public Double f(Vector<Double> x) {
        double[] z;
		double f1, f2, f3, f4;

		//Setup
		z = new double[x.size()];
		for (int i = 0; i < x.size(); i++) {
		    z[i] = (double) x.get(i);
		}   

		//Function  
	    f1 = 0.0;
		f2 = 1.0;
		f3 = 0.0;

		for (int i = 0; i < x.size(); i++) {
			f1 = f1 + Math.pow(Math.cos(z[i]), 4);
			f2 = f2 * Math.cos(z[i]) * Math.cos(z[i]); 
			f3 = f3 + ((z[i] * z[i]) * (double) (i+1));
		}

		f4 = Math.abs((f1 - 2 * f2) / Math.sqrt (f3));
		f4 = 0 - f4;

		return f4;
    }

    public double violation(Vector<Double> x) {
		double[] z;
		double g1, g2;

		//Setup
		z = new double[x.size()];
		for (int i = 0; i < x.size(); i++) {
		    z[i] = (double) x.get(i);
		}	    
	 
		//Constraints  
	    g1 = 1.0;
		g2 = 0.0;

		for (int i = 0; i < x.size(); i++) {
			g1 = g1 * z[i];
			g2 = g2 + z[i];
		}

		g1 = 0.75 - g1;
		g2 = g2 - (7.5 * x.size());

		//Mean Violations
		if (g1 < 0) {
			g1 = 0;
		}
		if (g2 < 0) {
			g2 = 0;
		}

		return (g1 + g2)/2;
    }
    
    public int getDimension() {
    	return dimension;
    }
    
    public double[] getDomainsMin() {
    	return domainsMin;
    }
    
    public double[] getDomainsMax() {
    	return domainsMax;
    }
}
