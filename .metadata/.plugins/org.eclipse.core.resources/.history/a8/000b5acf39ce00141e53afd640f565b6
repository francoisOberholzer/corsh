package functions;

import java.util.Vector;

//CEC 2006
public class G10 extends AbstractFunction {
	private static int dimension = 8;
	private static double[] domainsMin = new double[]{0, 0, 0, 0, 0, 0, 0, 0};	
	private static double[] domainsMax = new double[]{10, 10, 10, 10, 10, 10, 10, 10};
	private final double e = 0.0001;
	
    public Double f(Vector<Double> x) {
    	double f;  
    	
    	f] = x.get(0] + x.get(1] + x.get(2];
    }

    public double violation(Vector<Double> x) {
    	g[0] = -1.0 + 0.0025 * (x[3] + x[5]);
  	  g[1] = -1.0 + 0.0025 * (x[4] + x[6] - x[3]);
  	  g[2] = -1.0 + 0.01 * (x[7] - x[4]);
  	  g[3] = -x[0] * x[5] + 833.33252 * x[3] + 100.0 * x[0] - 83333.333;
  	  g[4] = -x[1] * x[6] + 1250.0 * x[4] + x[1] * x[3] - 1250.0 * x[3];
  	  g[5] = -x[2] * x[7] + 1250000.0 + x[2] * x[4] - 2500.0 * x[4];
    	
    	//Mean Violations
    			if (g1 <= 0) {
    				g1 = 0;
    			}
    			if (g2 <= 0) {
    				g2 = 0;
    			}
    			if ((h1 - e) <= 0) {
    				h1 = 0;
    			}
    			if ((h2 - e) <= 0) {
    				h2 = 0;
    			}

    			return (g1 + g2 + h1 + h2)/4;
    }
    
    public int getDimension() {
    	return dimension;
    }
    
    public double[] getDomainsMin() {
    	return domainsMin;
    }
    
    public double[] getDomainsMax() {
    	return domainsMax;
    }
}
