package functions;

import java.util.Vector;

//CEC 2006
public class G11 extends AbstractFunction {
	private static int dimension = 2;
	private static double[] domainsMin = new double[]{0, 0};	
	private static double[] domainsMax = new double[]{10, 10};
	
    public Double f(Vector<Double> x) {
    	/* objective function */
    	  f[0] = x[0] * x[0] + (x[1] - 1.0) * (x[1] - 1.0);
    	  /* constraints g<=0 */
    	  h[0] = x[1] - x[0] * x[0];
    }

    public double violation(Vector<Double> x) {
    	//Mean Violations
    			if (g1 <= 0) {
    				g1 = 0;
    			}
    			if (g2 <= 0) {
    				g2 = 0;
    			}
    			if ((h1 - e) <= 0) {
    				h1 = 0;
    			}
    			if ((h2 - e) <= 0) {
    				h2 = 0;
    			}

    			return (g1 + g2 + h1 + h2)/4;
    }
    
    public int getDimension() {
    	return dimension;
    }
    
    public double[] getDomainsMin() {
    	return domainsMin;
    }
    
    public double[] getDomainsMax() {
    	return domainsMax;
    }
}
