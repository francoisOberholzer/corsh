package functions;

import java.util.Vector;

//CEC 2006
public class G08 extends AbstractFunction {
	private static int dimension = 2;
	private static double[] domainsMin = new double[]{0, 0};	
	private static double[] domainsMax = new double[]{10, 10};
	
    public Double f(Vector<Double> x) {
    	 double pi = 4.0 * atan (1.0);

    	   f[0] = pow (sin (2 * Math.PI * x[0]), 3) * sin (2 * pi * x[1]) / (pow (x[0], 3) * (x[0] + x[1]));
    	   f[0] = -f[0]; /* Max-->Min, Modified by Jane,Nov 22 2005 */
    }

    public double violation(Vector<Double> x) {
    	g[0] = x[0] * x[0] - x[1] + 1.0;
 	   g[1] = 1.0 - x[0] + (x[1] - 4.0) * (x[1] - 4.0);
    	
    			if (g1 <= 0) {
    				g1 = 0;
    			}
    			if (g2 <= 0) {
    				g2 = 0;
    			}
    			if ((h1 - e) <= 0) {
    				h1 = 0;
    			}
    			if ((h2 - e) <= 0) {
    				h2 = 0;
    			}

    			return (g1 + g2 + h1 + h2)/4;
    }
    
    public int getDimension() {
    	return dimension;
    }
    
    public double[] getDomainsMin() {
    	return domainsMin;
    }
    
    public double[] getDomainsMax() {
    	return domainsMax;
    }
}
