package functions;

import java.util.Vector;

//CEC 2006
public class G23 extends AbstractFunction {
	private static int dimension = 9;
	private static double[] domainsMin = new double[]{0, 0, 0, 0, 0, 0, 0, 0, 0};	
	private static double[] domainsMax = new double[]{10, 10, 10, 10, 10, 10, 10, 10, 10};
	private final double e = 0.0001;
	
    public Double f(Vector<Double> x) {
    	  double f;
    	
    	  f = -9.0 * x.get(4) - 15.0 * x.get(7) + 6.0 * x.get(0) + 16.0 * x.get(1) + 10.0 * (x.get(5) + x.get(6));
    	  
    	  return f;
    }

    public double violation(Vector<Double> x) {
    	double g1, g2, h1, h2, h3, h4;
    	
    	g1 = x[8] * x[2] + 0.02 * x[5] - 0.025 * x[4];
  	    g2 = x[8] * x[3] + 0.02 * x[6] - 0.015 * x[7];
  	    h1 = x[0] + x[1] - x[2] - x[3];
  	    h2 = 0.03 * x[0] + 0.01 * x[1] - x[8] * (x[2] + x[3]);
  	    h3 = x[2] + x[5] - x[4];
  	    h4 = x[3] + x[6] - x[7];
    	
		if (g1 <= 0) {
			g1 = 0;
		}
		if (g2 <= 0) {
			g2 = 0;
		}
		if ((h1 - e) <= 0) {
			h1 = 0;
		}
		if ((h2 - e) <= 0) {
			h2 = 0;
		}

		return (g1 + g2 + h1 + h2)/4;
    }
    
    public int getDimension() {
    	return dimension;
    }
    
    public double[] getDomainsMin() {
    	return domainsMin;
    }
    
    public double[] getDomainsMax() {
    	return domainsMax;
    }
}
