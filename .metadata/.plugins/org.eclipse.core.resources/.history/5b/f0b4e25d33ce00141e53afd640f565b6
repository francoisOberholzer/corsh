package functions;

import java.util.Vector;

//CEC 2006
public class G06 extends AbstractFunction {
	private static int dimension = 2;
	private static double[] domainsMin = new double[]{0, 0};	
	private static double[] domainsMax = new double[]{10, 10};
	private final double e = 0.0001;
	
    public Double f(Vector<Double> x) {
    	double f;
    	
    	f = pow ((x[0] - 10.), 3) + pow ((x[1] - 20.), 3);
    }

    public double violation(Vector<Double> x) {
    	g[0] = 100. - (x[0] - 5.) * (x[0] - 5.) - (x[1] - 5.) * (x[1] - 5.);
  	  	g[1] = (x[0] - 6.) * (x[0] - 6.) + (x[1] - 5.) * (x[1] - 5.) - 82.81;
    	
		if (g1 <= 0) {
			g1 = 0;
		}
		if (g2 <= 0) {
			g2 = 0;
		}

		return (g1 + g2 + h1 + h2)/4;
    }
    
    public int getDimension() {
    	return dimension;
    }
    
    public double[] getDomainsMin() {
    	return domainsMin;
    }
    
    public double[] getDomainsMax() {
    	return domainsMax;
    }
}
