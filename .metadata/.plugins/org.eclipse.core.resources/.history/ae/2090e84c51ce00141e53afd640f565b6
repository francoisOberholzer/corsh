package functions;

import java.util.Vector;

//CEC 2006
public class G18 extends AbstractFunction {
	private static int dimension = 9;
	private static double[] domainsMin = new double[]{0, 0, 0, 0, 0, 0, 0, 0, 0};	
	private static double[] domainsMax = new double[]{10, 10, 10, 10, 10, 10, 10, 10, 10};
	private final double e = 0.0001;
	
    public Double f(Vector<Double> x) {
    	double f;
		
    	f = 0.5 * (x[0] * x[3] - x[1] * x[2] + x[2] * x[8] - x[4] * x[8] + x[4] * x[7] - x[5] * x[6]);
		f = -f;
		  
		return f;
    }

    public double violation(Vector<Double> x) {
    	 g[0] = -1.0 + pow (x[2], 2.0) + pow (x[3], 2.0);
   	  g[1] = -1.0 + pow (x[8], 2.0);
   	  g[2] = -1.0 + pow (x[4], 2.0) + pow (x[5], 2.0);
   	  g[3] = -1.0 + pow (x[0], 2.0) + pow (x[1] - x[8], 2.0);
   	  g[4] = -1.0 + pow (x[0] - x[4], 2.0) + pow (x[1] - x[5], 2.0);
   	  g[5] = -1.0 + pow (x[0] - x[6], 2.0) + pow (x[1] - x[7], 2.0);
   	  g[6] = -1.0 + pow (x[2] - x[4], 2.0) + pow (x[3] - x[5], 2.0);
   	  g[7] = -1.0 + pow (x[2] - x[6], 2.0) + pow (x[3] - x[7], 2.0);
   	  g[8] = -1.0 + pow (x[6], 2.0) + pow (x[7] - x[8], 2.0);/* bug fixed by Jane,Nov 25 2005 */
   	  g[9] = -x[0] * x[3] + x[1] * x[2];
   	  g[10] = -x[2] * x[8];
   	  g[11] = x[4] * x[8];
   	  g[12] = -x[4] * x[7] + x[5] * x[6];
    	
    			if (g1 <= 0) {
    				g1 = 0;
    			}
    			if (g2 <= 0) {
    				g2 = 0;
    			}
    			if ((h1 - e) <= 0) {
    				h1 = 0;
    			}
    			if ((h2 - e) <= 0) {
    				h2 = 0;
    			}

    			return (g1 + g2 + h1 + h2)/4;
    }
    
    public int getDimension() {
    	return dimension;
    }
    
    public double[] getDomainsMin() {
    	return domainsMin;
    }
    
    public double[] getDomainsMax() {
    	return domainsMax;
    }
}
