package functions;

import java.util.Vector;

//CEC 2006
public class G03 extends AbstractFunction {
	private static int dimension = 10;
	private static double[] domainsMin = new double[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0};	
	private static double[] domainsMax = new double[]{10, 10, 10, 10, 10, 10, 10, 10, 10, 10};
	
    public Double f(Vector<Double> x) {
    	int j;
    	  double f1, f2, f3 = Math.sqrt((double) nx);

    	  f1 = 1.;
    	  f2 = 0.;
    	  for (j = 0; j < dimension; j++)
    	    {
    	      f1 = f3 * f1 * x[j];
    	      f2 = f2 + x[j] * x[j];
    	    }
    	  f[0] = f1;
    	  f[0] = -f[0]; /* Max-->Min, Modified by Jane,Nov 22 2005 */
    	 
    }

    public double violation(Vector<Double> x) {
    	 h[0] = f2 - 1.0;

    			if (g1 <= 0) {
    				g1 = 0;
    			}
    			if (g2 <= 0) {
    				g2 = 0;
    			}
    			if ((h1 - e) <= 0) {
    				h1 = 0;
    			}
    			if ((h2 - e) <= 0) {
    				h2 = 0;
    			}

    			return (g1 + g2 + h1 + h2)/4;
    }
    
    public int getDimension() {
    	return dimension;
    }
    
    public double[] getDomainsMin() {
    	return domainsMin;
    }
    
    public double[] getDomainsMax() {
    	return domainsMax;
    }
}
