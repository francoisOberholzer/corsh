package functions;

import java.util.Vector;

//CEC 2006
public class G05 extends AbstractFunction {
	private static int dimension = 4;
	private static double[] domainsMin = new double[]{0, 0, 0, 0};	
	private static double[] domainsMax = new double[]{10, 10, 10, 10};
	
    public Double f(Vector<Double> x) {
    	  f[0] = 3.0 * x[0] + 0.000001 * pow (x[0], 3) + 2.0 * x[1] + (0.000002 / 3.0) * pow (x[1], 3);
    }

    public double violation(Vector<Double> x) {
    	g[0] = -x[3] + x[2] - 0.55;
  	  g[1] = -x[2] + x[3] - 0.55;
  	  h[0] = 1000.0 * sin (-x[2] - 0.25) + 1000.0 * sin (-x[3] - 0.25) + 894.8 - x[0];
  	  h[1] = 1000.0 * sin (x[2] - 0.25) + 1000.0 * sin (x[2] - x[3] - 0.25) + 894.8 - x[1];
  	  h[2] = 1000.0 * sin (x[3] - 0.25) + 1000.0 * sin (x[3] - x[2] - 0.25) + 1294.8;
    	
    			if (g1 <= 0) {
    				g1 = 0;
    			}
    			if (g2 <= 0) {
    				g2 = 0;
    			}
    			if ((h1 - e) <= 0) {
    				h1 = 0;
    			}
    			if ((h2 - e) <= 0) {
    				h2 = 0;
    			}

    			return (g1 + g2 + h1 + h2)/4;
    }
    
    public int getDimension() {
    	return dimension;
    }
    
    public double[] getDomainsMin() {
    	return domainsMin;
    }
    
    public double[] getDomainsMax() {
    	return domainsMax;
    }
}
